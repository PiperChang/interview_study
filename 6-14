## 비동기 프로그래밍

- 콜 스택과 힙 (JS 엔진이 제공)
콜 스택 : 실행컨텍스트 스택
힙 : 객체가 저장되는 메모리 공간 - 실행 컨텍스트는 힙에 저장된 객체를 참조한다. 객체는 크기가 안정해져 있어서, 할당해야 하는 메모리 공간의 크기를 런타임에 결정해야 하낟. 따라서, 힙은 구조화 되어 있지 않다.
 콜백 함수의 평가와 실행 : JS 엔진 담당
 호출 스케쥴링 위한 타이머 설정, 콜백 함수 등록 : 브라우저 담당

- 태스크 큐와 이벤트 루프 (브라우저 or NodeJS 가 제공)
태스크 큐 : setTimeout, setInterval과 같은 비동기 함수의 콜백 함수, 이벤트 핸들러 보관 영역. 프로미스 후속 처리 메서드의 콜백 함수가 일시적으로 보관되는 마이크로태스크 큐도 존재
이벤트 루프 : 콜 스택에 현재 실행 중인 컨텍스트 있는지, 큐에 대기 중인 함수 있는지 확인

콜백함수를 가진 함수의 처리 순서
- 콜백함수를 부르는 함수 실행 -> 호출 스케쥴링 -> 팝되서 사라짐 -> 브라우저 : 타이머 설정, 만료 시 콜백함수 태스크 큐에 푸시, JS 엔진 : 다음 함수 호출, 실행 컨텍스트 생성, 푸시 -> 동기적으로 실행되는 함수가 모두 실행되고, 비동기 함수 실행

- 마이크로테스크 큐
후속 처리 메서드의 콜백함수가 일시 저장. eX) then, catch, finally가 존재

## Ajax
 JS를 이용해서 브라우저가 서버에 비동기 방식으로 데이터 요청, 응답한 데이터 수신하여 웹 페이지를 동적으로 갱신하는 프로그래밍 방식을 말한다.
XMLHttpRequest는 HTTP 비동기 통신을 위한 메서드와 프로퍼티 제공. 
웹페이지의 변경에 필요한 데이터만 비동기 방식으로 전송받아 웹페이지를 변경할 필요가 없는 부분까지 다시 렌더링하지 않고, 변경할 필요가 있는 부분만 한정적으로 렌더링하는 방식이 가능해졌다. 
1. 불필요한 데이터 통신이 발생 X 
2. 불필요한 부분 재런더링 X -> 화면 순간적 깜빡임 X
3. 통신이 비동기 방식으로 동작 -> 서버에 요청을 보낸 후 블로킹 발생 X

## JSON
클라이언트 <-> 서버 간 HTTP 통신 위한 데이터 포맷

- JSON의 정적 프로토타입 메서드?
JSON.stringify() : 객체 -> 문자열
JSON.parse() : 문자열 -> 객체 

## Ajax로 HTTP 요청 보내기 위한 방법
1. XMLHttpRequest
- Web API인 XMLHttpRequest 객체는 ① HTTP 요청 전송과 ② HTTP 응답 수신을 위한 다양한 메서드와 프로퍼티를 제공합니다
2. Fetch
XMLHttpRequest 객체와 마찬가지로 HTTP 요청 전송 기능을 제공하는 클라이언트 사이드 Web API
- 장점 : 사용법 간단, 프로미스 지원 -> 콜백 패턴의 단점에서 자유로움
- IE에선 안됨
- URL, 요청 메서드, 헤더, 페이로드 등을 설정한 객체가 전달
- Response 객체에는 http response.body를 위한 메서드들이 포함됨. EX) Response.prototype.json 메서드는 Response 객체에서 HTTP 응답 몸체를 역직렬화함.

3. XMLHttpRequest와 fetch 메서드의 차이 
fetch는 프로미스 기반이라, 후속 처리 메서드 사용하여 코드 작성 가능
 
## Rest API
HTTP의 장점을 최대한 활용할 수 잇는 아키텍쳐, HTTP 프로토콜을 위도에 맞게 디자인하도록 유도
REST : HTTP 기반으로 클라이언트가 서버의 리소스에 접근하는 방식 규정한 아키텍쳐
Rest API : REST 기반으로 API 구현한 것
- REST API 구성 요소
리소스, 메소드, 메세지(표현)로 구성

- REST API 설계 중점
1. URI 는 리소스 표현에 집중 : 동사말구 명사 사용
2. 행위 정의는 HTTP 요청 메소드 통해서 할 것

- HTTP 오청 메서드 종류
GET, POST, PUT, PATCH, DELETE

- HTTP 상태 코드
200(요청 성공) 201 (새로운 리소스 생성됨)
400 401 403 404
500 (서버 내부 코드 문제)

## Promise
- 콜백 : 다른 함수의 매개변수로 함수 전달, 이벤트 발생 후 매개변수로 전달한 함수가 다시 호출되는 것을 의미. 비동기 방식의 함수
- 프로미스 : JS에서 비동기 처리 위한 패턴 중 하나로 콜백 함수 존재 -> 콜백 헬 : 중도 에러 처리 곤란. 이를 해결하기 위한 패턴
- 생성 방법 : Promise는 빌트인 객체라서 new Promise ~~ 로 생성하면 됨
- 인수로 전달 받은 콜백 함수 내부에서 비동기 처리 수행. 성공 시 resolve, 실패 시 reject 호출

- 프로미스 상태 
1. pending : 프로미스 생성 직후, 비동기 처리 수행 전 
2. fulfilled : 비동기 처리 성공(resolve)
3. reject : 비동기 처리 실패(reject)
fulfilled, rejected : settled 상태

## 제너레이터 async await
코드 블록 실행 일시 중지, 피요시점에 재개할 수 있는 함수
- 함수 호출자에게 함수 실행 제어권 양도 가능
- 함수 호출자와 함수의 상태 전달 가능
-호출 시 제너레이터 객체 반환

- 구조 : 


## async/awit 
가독성 좋게 비동기 처리를 동기 처리 처럼 동작하도록 구현할 수 있는 키워드. Promise가 settled 될때 까지 대기
- 에러 핸들링
- 코드 가독성

## 모듈이란?
어플 구성하는 개별 요소로 재사용 가능한 코드 조각
-파일 스코프를 가질 수 있어야 한다.
- 자신만의 파일 스코프를 갖는 모듈의 자산은
export로 공개 범위를 선택적으로 정할 수 있다.
- 다른 모듈에서 재사용할 수 있다.
- 모듈 사용자라 한다.
